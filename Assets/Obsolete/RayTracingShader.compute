    #pragma kernel CSMain
            
    Texture2D<float4> _SkyboxTexture;
    SamplerState sampler_SkyboxTexture;
    static const float PI = 3.14159265f;    
    RWTexture2D<float4> Result;
    float4x4 _CameraToWorl;
    float4x4 _CameraInverseProjection;

float2 _PixelOffset;

    float time;
#define v2r(x) float3(asin(-v.y),atan2(v.x,v.z),0)


//////////////////////////////////////////////
    struct Ray
    {
        float3 origin;
        float3 direction;
        float3 energy;
    };
    Ray CreateRay(float3 origin, float3 direction)
    {
        Ray ray;
        ray.origin = origin;
        ray.direction = direction;
        ray.energy = float3(1.0f, 1.0f, 1.0f);
        return ray;
    }

        struct RayHit
    {
        float3 position;
        float distance;
        float3 normal;
    };
    RayHit CreateRayHit()
    {
        RayHit hit;
        hit.position = float3(0.0f, 0.0f, 0.0f);
        hit.distance = 1.#INF;
        hit.normal = float3(0.0f, 0.0f, 0.0f);
        return hit;
    }


    Ray CreateCameraRay(float2 uv)
    {
        // Transform the camera origin to world space
        float3 origin = mul(_CameraToWorl, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
        
        // Invert the perspective projection of the view-space position
        float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
        // Transform the direction from camera to world space and normalize
        direction = mul(_CameraToWorl, float4(direction, 0.0f)).xyz;
        direction = normalize(direction);
        return CreateRay(origin, direction);
    }



///////////////////////////////////////////////

    void IntersectTri(Ray ray,inout RayHit bestHit, float3 Tri)
    {
        float3 e2,e1;
        e1=(Tri+1)-Tri;
        e2=(Tri+2)-Tri;
        
        



    }

        void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
    {
        // Calculate distance along the ray where the ground plane is intersected
        float t = -ray.origin.y / ray.direction.y;
        if (
            t > 0 //=intersect y=0 plane
            && 
            t < bestHit.distance)//distance defaults to inf, if y=0, calc goes to infinity
        {
        
            bestHit.distance = t;
            bestHit.position = ray.origin + t * ray.direction;
//            bestHit.normal = float3(0.0f, 1.0f, 0.0f);
            bestHit.normal =normalize(bestHit.position*sin(bestHit.position.z));
  
        }
    }
        void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
    {

        if(distance(ray.origin,sphere.xyz)<sphere.w+1.0f)
        {

        }else{

        // Calculate distance along the ray where the sphere is intersected
        float3 d = ray.origin - sphere.xyz;
        float p1 = -dot(ray.direction, d);
        float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
        if (p2sqr < 0)
            return;
        float p2 = sqrt(p2sqr);
        float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
        if (t > 0 && t < bestHit.distance)
        {

            

             bestHit.distance = t;
            bestHit.position = ray.origin + t * ray.direction;
            bestHit.normal = normalize(bestHit.position - sphere.xyz);
            
/*
            bestHit.distance = t;
            bestHit.position = ray.origin + t * ray.direction;
            bestHit.normal = normalize(bestHit.position - sphere.xyz);
            */
        }
    }
    
    }
      void IntersectTri(Ray ray, inout RayHit bestHit)
        {
            float3 pl[3]=
            {
                {0.0f,10.0f,0.0f},
                {10.0f,10.0f,0.0f},
                {0.0f,20.0f,0.0f},
            };
        
       float3 n=normalize(cross(pl[0]-pl[1],pl[0]-pl[2]));

        float t=cross(pl[0],n)-cross(ray.origin,n)/cross(ray.direction,n);
        

        }

//////////////////////////////////////////////////////


     RayHit Trace(Ray ray)
    {
        RayHit bestHit = CreateRayHit();
      for(int i=0;i<5;i++){
        IntersectSphere(ray,bestHit,float4(i*3.0f,3.5f,0.0f,1.0f));
      };
        IntersectGroundPlane(ray, bestHit);
        return bestHit;
    }


    float3 Shade(inout Ray ray, RayHit hit)
    {
        if (hit.distance < 1.#INF)
        {
            float3 specular = float3(0.9f, 0.9f, 0.9f);
            // Reflect the ray and multiply energy with specular reflection
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = reflect(ray.direction, hit.normal);
            ray.energy *= specular;
            // Return nothing
            return float3(0.0f, 0.0f, 0.0f);
        }
        else
        {
            // Erase the ray's energy - the sky doesn't reflect anything
            ray.energy = 0.0f;
            // Sample the skybox and write it
            float theta = acos(ray.direction.y) / -PI;
            float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
            return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
        }
    }
    
            void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere);

    



    [numthreads(8,8,1)]
    void CSMain (uint3 id : SV_DispatchThreadID)
    {
        // Get the dimensions of the RenderTexture
        uint width, height;
        Result.GetDimensions(width, height);
        // Transform pixel to [-1,1] range
        float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
        // Get a ray for the UVs
        Ray ray = CreateCameraRay(uv);

         // Trace and shade
        float3 result = float3(0, 0, 0);
 
        for (int i = 0; i < 4; i++)
        {
            RayHit hit = Trace(ray);
            result += ray.energy * Shade(ray, hit);
             if (!any(ray.energy))
             break;
                     IntersectTri(ray,  hit);

        }

    Result[id.xy] = float4(result, 1);
    }

